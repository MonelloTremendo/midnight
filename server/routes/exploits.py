from flask import jsonify, render_template, request, Response, redirect

from server import app
import server.database.database as database


@app.route('/exploits', methods=['GET'])
# @auth.auth_required
def exploits():
    exploits = database.query("SELECT * FROM exploits")
    exploits = [{"id": item["id"], "name": item["name"], "threads": item["threads"],
                 "timeout": item["timeout"], "source": item["source"]} for item in exploits]

    return render_template('exploits.html', exploits=exploits, teams=None, eid=None, selectedTeams=None, selectedExploit=None)


@app.route('/exploits/<int:eid>', methods=['GET'])
# @auth.auth_required
def exploit(eid):
    # database.query("INSERT INTO exploits VALUES (1, 'asd', 123, 21, 'lol')")
    # database.query("INSERT INTO exploits VALUES (2, 'asd', 123, 21, 'lol')")
    #
    # database.query("INSERT INTO teams VALUES (1, 'asd', 'lol')")
    # database.query("INSERT INTO teams VALUES (2, 'asd', 'lol')")
    #
    # database.query("INSERT INTO exploit_teams VALUES (1, 1)")
    # database.get().commit()

    teams = database.query("SELECT * FROM teams")
    teams = [{"id": item["id"], "name": item["name"], "ip": item["ip"]}
             for item in teams]

    selectedTeams = database.query(
        "SELECT * FROM exploit_teams INNER JOIN teams ON exploit_teams.team_id = teams.id WHERE exploit_teams.exploit_id = ?", (eid,))
    selectedTeams = [item["id"] for item in selectedTeams]
    print(selectedTeams)

    exploits = database.query("SELECT * FROM exploits")
    exploits = [{"id": item["id"], "name": item["name"], "threads": item["threads"],
                 "timeout": item["timeout"], "source": item["source"]} for item in exploits]

    try:
        selectedExploit = next(
            filter(lambda item: item["id"] == eid, exploits))
    except:
        selectedExploit = None

    print(selectedExploit)

    return render_template('exploits.html', exploits=exploits, teams=teams, eid=eid if selectedExploit != None else None, selectedTeams=selectedTeams, selectedExploit=selectedExploit)


@app.route('/exploits', methods=['POST'])
# @auth.auth_required
def exploit_add():
    if request.json["name"] == "":
        return jsonify({"message": "invalid data"}), 400

    conn = database.get()
    cursor = conn.cursor()

    cursor.execute("INSERT INTO exploits (name, threads, timeout, source) VALUES (?, ?, ?, ?)",
                   (request.json["name"], 16, 16, ""))
    conn.commit()

    return jsonify({"id": cursor.lastrowid}), 200


@app.route('/exploits/<int:eid>', methods=['PATCH'])
# @auth.auth_required
def exploit_update(eid):
    conn = database.get()
    cursor = conn.cursor()

    cursor.execute("UPDATE exploits SET name = ?, threads = ?, timeout = ?, source = ? WHERE id = ?",
                   (request.json["exploit"]["name"], request.json["exploit"]["threads"], request.json["exploit"]["timeout"], request.json["exploit"]["source"], eid))

    cursor.execute("DELETE FROM exploit_teams WHERE exploit_id = ?", (eid,))
    cursor.executemany("INSERT INTO exploit_teams VALUES (?, ?)", [
                       (eid, item) for item in request.json["teams"]])
    conn.commit()

    return jsonify({}), 204


@app.route('/exploits/<int:eid>', methods=['DELETE'])
# @auth.auth_required
def exploit_delete(eid):
    conn = database.get()
    cursor = conn.cursor()

    cursor.execute("DELETE FROM exploits WHERE id = ?", (eid,))
    conn.commit()

    return jsonify({}), 204


# id INTEGER PRIMARY KEY AUTOINCREMENT,
# name TEXT,
# threads INTEGER NOT NULL,
# timeout INTEGER NOT NULL,
# source TEXT

# @app.route('/teams/<int:uid>', methods=['GET'])
# @auth.auth_required
# def teams_get(uid: int):
#    item = database.query("SELECT * FROM teams WHERE id = ?", (uid,))
#
#    if len(item) > 0:
#        return jsonify({"id": item[0]["id"], "name": item[0]["name"], "ip": item[0]["ip"]}), 200
#    else:
#        return jsonify({"message": "not found"}), 404
#
#
# @app.route('/teams', methods=['POST'])
# def teams_add():
#    if request.json["name"] == "" or request.json["ip"] == "":
#        return jsonify({"message": "invalid data"}), 400
#
#    conn = database.get()
#
#    cursor = conn.cursor()
#    cursor.execute("INSERT INTO teams (name, ip) VALUES (?, ?)", (request.json["name"], request.json["ip"]))
#    conn.commit()
#
#    return jsonify({"id": cursor.lastrowid}), 200
#
# @app.route('/teams/<int:uid>', methods=['PATCH'])
# def teams_edit(uid: int):
#    if request.json["name"] == "" or request.json["ip"] == "":
#        return jsonify({"message": "invalid data"}), 400
#
#    conn = database.get()
#
#    cursor = conn.cursor()
#    cursor.execute("UPDATE teams SET name = ?, ip = ? WHERE id = ?", (request.json["name"], request.json["ip"], uid))
#    conn.commit()
#
#    return jsonify({}), 204
#
# @app.route('/teams/<int:uid>', methods=['DELETE'])
# def teams_delete(uid: int):
#    conn = database.get()
#
#    cursor = conn.cursor()
#    cursor.execute("DELETE FROM teams WHERE id = ?", (uid,))
#    conn.commit()
#
#    return jsonify({}), 204
